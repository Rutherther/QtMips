name: CMake

on:
  push:
    branches:
      - cmake

jobs:
  compile-examples:
    runs-on: ubuntu-latest
    env:
      NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM: 1

    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: "Enable nix cache"
        uses: cachix/cachix-action@v8
        with:
          name: ctu-apo-simulator-project
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Test nix shell run
        working-directory: ${{ github.workspace }}/build
        run: nix-shell ${{ github.workspace }}/extras/crosscompiling/shell-mips-elf.nix --run "cmake ../examples &&
        make"

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc", cxx: "g++", qt_version: "5.11.2"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Release",
            cc: "clang", cxx: "clang++", qt_version: "5.11.2"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{ matrix.config.qt_arch }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: "cmake $GITHUB_WORKSPACE
                    -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}"

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: ctest

  build-mingw:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            build_type: "Release",
            cc: "gcc", cxx: "g++", build_system: "MinGW Makefiles",
            # Older Qt releases do not have 64bit mingw release
            qt_version: "5.12.9", qt_arch: "win64_mingw73"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{ matrix.config.qt_arch }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: "cmake $GITHUB_WORKSPACE
                    -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
                    -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
                    -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
                    -G \"${{ matrix.config.build_system }}\""

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: ctest
